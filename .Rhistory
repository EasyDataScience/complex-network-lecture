l<-layout_with_fr(g)
plot(g, vertex.size=3,vertex.frame.color = NA,
vertex.color="orange",
vertex.label=vlsize, vertex.label.color="black",
vertex.label.size = 0.5, vertex.label.cex=.5)
plot(g, vertex.size=3,vertex.frame.color = "black",
vertex.color="orange",
vertex.label=NA)
plot(g, vertex.size=3,vertex.frame.color = NA,
vertex.color="orange",
vertex.label=NA)
plot(g, vertex.size=bet+1,vertex.frame.color = NA,
vertex.color="orange",
vertex.label=NA)
max(bet)
max(log(bet))
plot(g, vertex.size=log(bet),vertex.frame.color = NA,
vertex.color="orange",
vertex.label=NA)
plot(g, vertex.size=log(bet+0.01),vertex.frame.color = NA,
vertex.color="orange",
vertex.label=NA)
bet <- log(bet+0.01)
plot(g, vertex.size=bet,vertex.frame.color = NA,
vertex.color="orange",
vertex.label=NA)
bet <- log(bet+0.01)
bet <- betweenness(g)
bet <- log(bet+0.01)
plot(g, vertex.size=bet+1,vertex.frame.color = NA,
vertex.color="orange",
vertex.label=NA)
plot(g, vertex.size=round(bet),vertex.frame.color = NA,
vertex.color="orange",
vertex.label=NA)
summary(bet)
plot(g, vertex.size=round(bet-min(bet)),vertex.frame.color = NA,
vertex.color="orange",
vertex.label=NA)
plot(g, vertex.size=round(bet-min(bet)),vertex.frame.color = "black",
vertex.color="orange",
vertex.label=NA)
plot(g, vertex.size=round(bet-min(bet)),vertex.frame.color = "black",
vertex.color=adjustcolor("SkyBlue2", alpha.f = .5),
vertex.label=NA)
library("multiplex")
library("igraph")
file <- "/Volumes/P/DATA/NETWORK/karate/karate.gml"
tmp <- read.gml(file, as = c("srt"), directed = FALSE, coords = FALSE)
g <- graph_from_edgelist(as.matrix(tmp[,1:2]),directed = FALSE)
components <- components(g, mode = c("weak", "strong"))
g <- delete.vertices(g, components$membership!=which.max(components$csize))
g <- simplify(g, remove.multiple = TRUE)
bet <- betweenness(g)
bet <- log(bet+0.01)
l<-layout_with_fr(g)
plot(g, vertex.size=round(bet-min(bet)),vertex.frame.color = "black",
vertex.color=adjustcolor("SkyBlue2", alpha.f = .5),
vertex.label=NA)
bet <- log(bet)
l<-layout_with_fr(g)
plot(g, vertex.size=round(bet-min(bet)),vertex.frame.color = "black",
vertex.color=adjustcolor("SkyBlue2", alpha.f = .5),
vertex.label=NA)
library("multiplex")
library("igraph")
file <- "/Volumes/P/DATA/NETWORK/karate/karate.gml"
tmp <- read.gml(file, as = c("srt"), directed = FALSE, coords = FALSE)
g <- graph_from_edgelist(as.matrix(tmp[,1:2]),directed = FALSE)
components <- components(g, mode = c("weak", "strong"))
g <- delete.vertices(g, components$membership!=which.max(components$csize))
g <- simplify(g, remove.multiple = TRUE)
bet <- betweenness(g)
bet <- log(bet)
l<-layout_with_fr(g)
plot(g, vertex.size=round(bet-min(bet)),vertex.frame.color = "black",
vertex.color=adjustcolor("SkyBlue2", alpha.f = .5),
vertex.label=NA)
library("multiplex")
library("igraph")
file <- "/Volumes/P/DATA/NETWORK/karate/karate.gml"
tmp <- read.gml(file, as = c("srt"), directed = FALSE, coords = FALSE)
g <- graph_from_edgelist(as.matrix(tmp[,1:2]),directed = FALSE)
components <- components(g, mode = c("weak", "strong"))
g <- delete.vertices(g, components$membership!=which.max(components$csize))
g <- simplify(g, remove.multiple = TRUE)
bet <- betweenness(g)
bet <- log(bet+0.01)
l<-layout_with_fr(g)
plot(g, vertex.size=round(bet-min(bet)),vertex.frame.color = "black",
vertex.color=adjustcolor("SkyBlue2", alpha.f = .5),
vertex.label=NA)
library("multiplex")
library("igraph")
file <- "/Volumes/P/DATA/NETWORK/karate/karate.gml"
tmp <- read.gml(file, as = c("srt"), directed = FALSE, coords = FALSE)
g <- graph_from_edgelist(as.matrix(tmp[,1:2]),directed = FALSE)
# Set weight
g <- set.edge.attribute(g, "weight", value=tmp[,3])
components <- components(g, mode = c("weak", "strong"))
g <- delete.vertices(g, components$membership!=which.max(components$csize))
g <- simplify(g, remove.multiple = TRUE)
cfg <- cluster_fast_greedy(as.undirected(g))
plot(cfg, as.undirected(g), edge.arrow.size=E(g)$weight, edge.curved=0,
vertex.size=3,vertex.frame.color = NA,
vertex.color="orange",
vertex.label=vlsize, vertex.label.color="black",
vertex.label.size = 0.5, vertex.label.cex=.5)
plot(cfg, as.undirected(g),
vertex.size=3,vertex.frame.color = NA,
vertex.color="orange")
plot(cfg, as.undirected(g),
vertex.size=5,vertex.frame.color = NA,
vertex.color="orange")
plot(cfg, as.undirected(g), edge.arrow.size=E(g)$weight, edge.curved=0,
vertex.size=3,vertex.frame.color = NA,
vertex.color="orange",
vertex.label.color="black",
vertex.label.size = 2, vertex.label.cex=.5)
plot(cfg, as.undirected(g), edge.arrow.size=E(g)$weight, edge.curved=0,
vertex.size=3,vertex.frame.color = NA,
vertex.color="orange",
vertex.label.color="black",
vertex.label.size = 5, vertex.label.cex=.5)
plot(g, vertex.size=round(bet-min(bet)),vertex.frame.color = "black",
vertex.color=adjustcolor("SkyBlue2", alpha.f = .5))
plot(g, vertex.size=round(bet-min(bet)),vertex.frame.color = "black",
vertex.color=adjustcolor("SkyBlue2", alpha.f = .5),
vertex.label.size=5, vertex.label.cex= 0.5)
plot(g, vertex.size=round(bet-min(bet)),vertex.frame.color = "black",
vertex.color=adjustcolor("SkyBlue2", alpha.f = .5),
vertex.label.size=15, vertex.label.cex= 1.5)
plot(g, vertex.size=round(bet-min(bet)),vertex.frame.color = "black",
vertex.color=adjustcolor("SkyBlue2", alpha.f = .5),
vertex.label.size=10, vertex.label.cex= 1.5)
plot(g, vertex.size=round(bet-min(bet)),vertex.frame.color = "black",
vertex.color=adjustcolor("SkyBlue2", alpha.f = .5),
vertex.label.size=5, vertex.label.cex= 1.5)
plot(g, vertex.size=round(bet-min(bet)),vertex.frame.color = "black",
vertex.color=adjustcolor("SkyBlue2", alpha.f = .5),
vertex.label.size=5, vertex.label.cex= 1.)
plot(g, vertex.size=round(bet-min(bet)),vertex.frame.color = "black",
vertex.color=adjustcolor("SkyBlue2", alpha.f = .5),
vertex.label.dist=5, vertex.label.cex= 1.)
plot(g, vertex.size=round(bet-min(bet)),vertex.frame.color = "black",
vertex.color=adjustcolor("SkyBlue2", alpha.f = .5),
vertex.label.dist=1, vertex.label.cex= 1.)
plot(g, vertex.size=round(bet-min(bet)),vertex.frame.color = "black",
vertex.color=adjustcolor("SkyBlue2", alpha.f = .5),
vertex.label.dist=1, vertex.label.cex= .8)
plot(cfg, as.undirected(g), edge.arrow.size=E(g)$weight, edge.curved=0,
vertex.size=3,vertex.frame.color = NA,
vertex.color="orange",
vertex.label.color="black",
vertex.label.dist = 1, vertex.label.cex=.8)
plot(cfg, as.undirected(g), edge.arrow.size=E(g)$weight, edge.curved=0,
vertex.size=3,vertex.frame.color = NA,
vertex.color="orange",
vertex.label.color="black",
vertex.label.dist = 1, vertex.label.cex=.8)
plot(cfg, as.undirected(g), edge.arrow.size=E(g)$weight, edge.curved=0,
vertex.size=3,vertex.frame.color = NA,
vertex.color="orange",
vertex.label.color="black",
vertex.label.dist = 1, vertex.label.cex=.8)
gtemp <- readRDS("bitcoin_CondBet/graph_temp_720.RData")
library(igraph)
#V <- c(1,2,3,4,5)
g1 <- graph( edges=c(1,2, 2,3, 3,1, 3,4), n=5, directed=F )
E <- get.edgelist(g1)
#print(V(g1))
plot(g1, vertex.size = 20.0,vertex.label.cex = 1.,
vertex.label.dist = 3, edge.width = 2)
library(knitr)
library(kableExtra)
text_tbl <- data.frame(
Measure = c("Số đỉnh", "Số cạnh", "Bậc TB"),
Value = c(500, 2980, 5.96)
)
kable(text_tbl) %>%
kable_styling(full_width = F) %>%
column_spec(1, bold = T, border_right = T)
tmp <- read.table('dataset/US_500airports.txt', header = FALSE) # change 0 to max+1
temp <- max(max(tmp$V1),max(tmp$V2))
tmp$V1 <- ifelse(tmp$V1 == 0, temp,tmp$V1)
tmp$V2 <- ifelse(tmp$V2 == 0, temp,tmp$V2)
g <- graph_from_edgelist(as.matrix(tmp[,1:2]),directed = FALSE)
g_binary <- graph_from_edgelist(as.matrix(tmp[,1:2]),directed = FALSE)
# Set weight
g <- set.edge.attribute(g, "weight", value=tmp[,3])
deg <- degree(g)
hist(deg,250)
knitr::include_graphics("images/USAirport_500_deg.png")
sample(length(V(g)),10)
library(igraph)
sample(length(V(g)),10)
# Delete 90% nodes
g1 <- delete.vertices(g,V(g)[sample(length(V(g)),0.9*length(V(g)))])
# Plot graph
# Without label
# With label
plot(g1,vertex.size=1.0,
vertex.frame.color=V(g)$color,
vertex.label = NA,
vertex.label.cex = 0.5,
vertex.color= NA,
edge.width = 10*E(g)$weight^0.5)
plot(g,vertex.size=0.5,
vertex.color= NA,
edge.width = E(g)$weight)
plot(g1,vertex.size=0.5,
vertex.color= NA,
edge.width = E(g)$weight)
plot(g,vertex.size=0.5,
vertex.label = NA,
vertex.label.cex = 0.5,
vertex.color= NA,
edge.width = E(g)$weight)
plot(g1,vertex.size=2,
vertex.label = NA,
vertex.label.cex = 0.5,
vertex.color= NA,
edge.width = E(g)$weight)
length(V(g1))
tmp <- read.table('dataset/bitcoin.txt', header = FALSE)
library(igraph)
g <- graph_from_edgelist(as.matrix(tmp[,1:2]),directed = FALSE)
# Set weight
g <- set.edge.attribute(g, "weight", value=tmp[,3])
# Delete 90% nodes
g1 <- delete.vertices(g,V(g)[sample(length(V(g)),0.9*length(V(g)))])
plot(g1,vertex.size=2,
vertex.label = NA,
vertex.label.cex = 0.5,
vertex.color= NA,
edge.width = E(g)$weight)
E(g)$weight
plot(g1,vertex.size=2,
vertex.label = NA,
vertex.label.cex = 0.5,
vertex.color= NA,
edge.width = log(E(g)$weight))
library(ggnet)
g1.plot <- ggnet2(igraph_to_network(g1), size = 0.5, node.color = "blue", edge.size = "weights")
igraph_to_network <- function(g){
if (nrow(as.matrix(get.edgelist(g)))>0){
net = network(as.matrix(get.edgelist(g)), directed = FALSE)
# load edges from a data.frame via network.edgelist
edges_matrix <- as.matrix(get.edgelist(g))
edata <-data.frame(
tails=edges_matrix[,1],
heads=edges_matrix[,2],
weights= E(g)$weight/3,  # Manually increase the size
stringsAsFactors=FALSE
)
net<-network.edgelist(edata,network.initialize(length(V(g))),ignore.eval=FALSE)
} else {net <- network.initialize(length(V(g)))}
#as.sociomatrix(net,attrname='weights')
#net%e%'weights'
return(net)
}
g1.plot <- ggnet2(igraph_to_network(g1), size = 0.5, node.color = "blue", edge.size = "weights")
V(g1)
tmp <- read.table('dataset/bitcoin.txt', header = FALSE)
library(igraph)
g <- graph_from_edgelist(as.matrix(tmp[,1:2]),directed = FALSE)
# Set weight
g <- set.edge.attribute(g, "weight", value=tmp[,3])
View(tmp)
tmp <- read.table('dataset/bitcoin.txt', header = TRUE)
tmp <- read.table('dataset/bitcoin.txt', header = TRUE)
library(igraph)
g <- graph_from_edgelist(as.matrix(tmp[,1:2]),directed = FALSE)
# Set weight
g <- set.edge.attribute(g, "weight", value=tmp[,3])
# Load igraph version
detach(package:sna, unload=TRUE)
detach(package:network, unload=TRUE)
detach(package:igraph, unload=TRUE)
# IGRAPH FIRST
library(igraph)
g <- graph_from_edgelist(as.matrix(tmp[,1:2]),directed = FALSE)
# Set weight
g <- set.edge.attribute(g, "weight", value=tmp[,3])
# Delete 90% nodes
g1 <- delete.vertices(g,V(g)[sample(length(V(g)),0.9*length(V(g)))])
library(ggnet)
igraph_to_network <- function(g){
if (nrow(as.matrix(get.edgelist(g)))>0){
net = network(as.matrix(get.edgelist(g)), directed = FALSE)
# load edges from a data.frame via network.edgelist
edges_matrix <- as.matrix(get.edgelist(g))
edata <-data.frame(
tails=edges_matrix[,1],
heads=edges_matrix[,2],
weights= E(g)$weight/3,  # Manually increase the size
stringsAsFactors=FALSE
)
net<-network.edgelist(edata,network.initialize(length(V(g))),ignore.eval=FALSE)
} else {net <- network.initialize(length(V(g)))}
#as.sociomatrix(net,attrname='weights')
#net%e%'weights'
return(net)
}
g1.plot <- ggnet2(igraph_to_network(g1), size = 0.5, node.color = "blue", edge.size = "weights")
g1.plot
0.9*6005
source('~/Dropbox/Network/Functions/Resilence.R')
N <- length(V(g))
N
df <- attack_network_random(100,0.01, 1, g, return_graph = F)
V(g)
detach(package:sna, unload=TRUE)
detach(package:network, unload=TRUE)
detach(package:igraph, unload=TRUE)
# IGRAPH FIRST
library(igraph)
df <- attack_network_random(100,0.01, 1, g, return_graph = F)
#df <- attack_network_intentional_step(str = "RB", step = 5, 1, g, return_graph = F)
df <- attack_network_random(100,0.01, 1, g, return_graph = F)
# Compute weighted efficiency ----
effi<-function(g,pesis,N)
{
#pesis<-E(g)$weight
pesis<-1/pesis
weg.w<-shortest.paths(g,mode = c("all"),weight=pesis,algorithm = c("dijkstra"))## weighted shortest path
#print(weg.w)
m<-1/weg.w
diag(m)<-0
effe<-sum(m)/(N*(N-1)) ## Weighted efficiency, weighted paths
return(effe)
}
#df <- attack_network_intentional_step(str = "RB", step = 5, 1, g, return_graph = F)
df <- attack_network_random(100,0.01, 1, g, return_graph = F)
attack_network_random <- function(ntrial, deltaq, qstop, g, return_graph){
N <- length(V(g))
q <- seq(from=0,to=qstop ,by=deltaq)
# Measures
maxsize1 <- max(clusters(g)$csize)  #random breakdown
k <- degree(g)
kappa <- ifelse(mean(k)!=0,mean(k^2)/mean(k),0)
efficient <- effi(g,E(g)$weight,N)
gtemp <- g
for (i in q[-1]){
progress(100*i/length(q))
tam<- 0
kappa_temp <- 0
efficient_temp <- 0
#random
for (trial in 1:ntrial){ # Repeat simulation only for Random breakdown
gtemp <- delete_vertices(g, sample(V(g),round(i*N),replace =FALSE)) #remove a fraction i of nodes
k <- degree(gtemp)
kappa_temp <- kappa_temp + ifelse(mean(k)!=0,mean(k^2)/mean(k),0)
tam <- tam + max(clusters(gtemp)$csize)
efficient_temp <- efficient_temp + effi(gtemp,E(gtemp)$weight,length(V(gtemp)))
}
maxsize1 <- c(maxsize1, tam/ntrial)
kappa <- c(kappa, kappa_temp/ntrial)
efficient <- c(efficient, efficient_temp/ntrial)
}
df <- data.frame(q,maxsize1, kappa, efficient)
df$Strategy <- "Random breakdown"
# ggplot(df, aes(x=q,y=maxsize1)) + geom_line(aes(color= Strategy),size=1)+
#   ylab("relative size of giant component") +xlab("fraction of removed nodes") + theme_bw()+
#   theme(legend.position = c(0.75, 0.85),legend.background = element_rect(color = "black", size = 1, linetype = "solid"),legend.text=element_text(size=14),axis.title=element_text(size=14),axis.text=element_text(size=12))
#
if (return_graph) return(gtemp) else return(df) #gnew5
}
attack_network_random <- function(ntrial, deltaq, qstop, g, return_graph){
N <- length(V(g))
q <- seq(from=0,to=qstop ,by=deltaq)
# Measures
maxsize1 <- max(clusters(g)$csize)  #random breakdown
k <- degree(g)
kappa <- ifelse(mean(k)!=0,mean(k^2)/mean(k),0)
efficient <- effi(g,E(g)$weight,N)
gtemp <- g
for (i in q[-1]){
progress(100*i/length(q))
tam<- 0
kappa_temp <- 0
efficient_temp <- 0
#random
for (trial in 1:ntrial){ # Repeat simulation only for Random breakdown
gtemp <- delete_vertices(g, sample(V(g),round(i*N),replace =FALSE)) #remove a fraction i of nodes
k <- degree(gtemp)
kappa_temp <- kappa_temp + ifelse(mean(k)!=0,mean(k^2)/mean(k),0)
tam <- tam + max(clusters(gtemp)$csize)
efficient_temp <- efficient_temp + effi(gtemp,E(gtemp)$weight,length(V(gtemp)))
}
maxsize1 <- c(maxsize1, tam/ntrial)
kappa <- c(kappa, kappa_temp/ntrial)
efficient <- c(efficient, efficient_temp/ntrial)
}
df <- data.frame(q,maxsize1, kappa, efficient)
df$Strategy <- "Random breakdown"
# ggplot(df, aes(x=q,y=maxsize1)) + geom_line(aes(color= Strategy),size=1)+
#   ylab("relative size of giant component") +xlab("fraction of removed nodes") + theme_bw()+
#   theme(legend.position = c(0.75, 0.85),legend.background = element_rect(color = "black", size = 1, linetype = "solid"),legend.text=element_text(size=14),axis.title=element_text(size=14),axis.text=element_text(size=12))
#
if (return_graph) return(gtemp) else return(df) #gnew5
}
#df <- attack_network_intentional_step(str = "RB", step = 5, 1, g, return_graph = F)
df <- attack_network_random(20,0.01, 1, g, return_graph = F)
require(svMisc)  # For displaying progress bar
source('~/Dropbox/Network/Functions/Resilence.R')
#df <- attack_network_intentional_step(str = "RB", step = 5, 1, g, return_graph = F)
df <- attack_network_random(20,0.01, 1, g, return_graph = F)
length(V(g))
## BREAKDOWN SIMULATION ----
# Attack network using 5 strategies: ID, IB, IWB, IS, RD, RB, RWB, RS and CondBet, CondWBet
# E(g)$weight <- 1 # For unweighted NW
df <- attack_network_intentional(str = "ID", 1, g, return_graph = F, save_graph=F)
write.csv(df,file="bitcoin_ID.csv",row.names = F)
plot_power(g,20)
plot_power(degree(g),20)
plot_power(degree(g),30)
x=degree(g)
k = 3-
k = 30
temp <- hist(x,k)
plot(temp$mids,temp$counts, log='xy')
degree = temp$mid
probability = temp$counts
# delete blank values
nonzero.position = which(probability != 0)
probability = probability[nonzero.position]
degree = degree[nonzero.position]
reg = lm(log(probability[2:18]) ~ log(degree[2:18]))
cozf = coef(reg)
alpha = -cozf[[2]]
print(paste("Alpha =", round(alpha, 3)))
plot_power(degree(g),30)
plot_power(degree(g),20)
plot_power(degree(g),40)
plot_power(degree(g),60)
12/5
12/5-1.5^2
exp(-2*0.5)
1589*0.04
require(igraph)
require(ggplot2)
require(svMisc)  # For displaying progress bar
source('~/Dropbox/Network/Functions/Resilence.R')
source('~/Dropbox/Network/Functions/basic_function.R')
N <- length(V(g))
N
gtemp <- readRDS("bitcoin_ID/graph_temp_840.RData")
gtemp <- readRDS("~/Dropbox/Network/WeightedNetwork/WeightedNetwork/bitcoin_ID/graph_temp_840.RData")
library(ggnet)  # Manually increase the weight in igraph_to_network() if needed
# Node color
ncol <- rep("blue",length(V(gtemp)))
weighted_betweeness <- betweenness(gtemp, v= V(gtemp), directed = FALSE, weights = 1/E(gtemp)$weight)
g_binary <- gtemp
E(g_binary)$weight <- 1
between <- betweenness(g_binary, v= V(g_binary), directed = FALSE, weights = NULL,nobigint = TRUE, normalized = FALSE)
strength <- strength(gtemp, v = V(gtemp), mode = c("all"),loops = F)
g1.plot <- ggnet2(igraph_to_network(gtemp), size = 0.5, node.color = ncol, edge.size = "weights")
g1.plot
gtemp <- readRDS("~/Dropbox/Network/WeightedNetwork/WeightedNetwork/bitcoin_ID/graph_temp_960.RData")
library(ggnet)  # Manually increase the weight in igraph_to_network() if needed
g1.plot <- ggnet2(igraph_to_network(gtemp), size = 0.5, node.color = ncol, edge.size = "weights")
g1.plot
# Load igraph version
detach(package:sna, unload=TRUE)
detach(package:network, unload=TRUE)
detach(package:igraph, unload=TRUE)
# IGRAPH FIRST
library(igraph)
library(ggnet)  # Manually increase the weight in igraph_to_network() if needed
g1.plot <- ggnet2(igraph_to_network(gtemp), size = 0.5, node.color = ncol, edge.size = "weights")
g1.plot
# Node color
ncol <- rep("blue",length(V(gtemp)))
weighted_betweeness <- betweenness(gtemp, v= V(gtemp), directed = FALSE, weights = 1/E(gtemp)$weight)
g_binary <- gtemp
E(g_binary)$weight <- 1
# Load igraph version
detach(package:sna, unload=TRUE)
detach(package:network, unload=TRUE)
detach(package:igraph, unload=TRUE)
# IGRAPH FIRST
library(igraph)
# Highest connected components
components <- components(gtemp, mode = c("weak", "strong"))
# Node color
ncol <- rep("blue",length(V(gtemp)))
weighted_betweeness <- betweenness(gtemp, v= V(gtemp), directed = FALSE, weights = 1/E(gtemp)$weight)
g_binary <- gtemp
E(g_binary)$weight <- 1
between <- betweenness(g_binary, v= V(g_binary), directed = FALSE, weights = NULL,nobigint = TRUE, normalized = FALSE)
strength <- strength(gtemp, v = V(gtemp), mode = c("all"),loops = F)
library(ggnet)  # Manually increase the weight in igraph_to_network() if needed
g1.plot <- ggnet2(igraph_to_network(gtemp), size = 0.5, node.color = ncol, edge.size = "weights")
g1.plot
g1 <- delete.vertices(g, V(g)[sample(960,N)])
V(g)
V(g)[sample(960,N)]
V(g)[sample(N,960)]
g1 <- delete.vertices(g, V(g)[sample(N,960)])
# Load igraph version
detach(package:sna, unload=TRUE)
detach(package:network, unload=TRUE)
detach(package:igraph, unload=TRUE)
# IGRAPH FIRST
library(igraph)
g1 <- delete.vertices(g, V(g)[sample(N,960)])
library(ggnet)  # Manually increase the weight in igraph_to_network() if needed
g1.plot <- ggnet2(igraph_to_network(g1), size = 0.5, node.color = ncol, edge.size = "weights")
g1.plot
# Input Network
tmp <- read.table('netscience.txt', header = TRUE)
